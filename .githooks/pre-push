@@ -8,68 +8,81 @@
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).


remote="$1"
url="$2"
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

#die letzten 100 Commit-IDs speichern
var=$(git rev-list --max-count=100 HEAD)

remoteChanges=true


while read local_ref local_oid remote_ref remote_oid
do
	#überprüfen, ob es neue Commits im Remote Repository gibt
	var_split=$(echo $var | xargs)
	for value in $var_split
	do
		#Prüfen, ob der neuste Commit des Remotes lokal vorhanden ist
		if test "$value" = "$remote_oid"
		then
			#Commit lokal vorhanden --> kein Pull erforderlich
			remoteChanges=false
		else
			#Commit lokal nicht vorhanden --> Pull erforderlich
			:
		fi
	done
	#anhand Inhalt von $remoteChanges Entscheidung über Push treffen
	if "$remoteChanges";
	then
		#Abbruch des Pushes mit Fehlermeldung
		echo "Es gibt neue Commits im Remote Repository. Bitte zuerst einen Pull durchführen."
		exit 1
	else
		#Push wird fortgesetzt
		:
	fi

	#Commit Message überprüfen
	#Range der betrachteten Commits wird festgelegt
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			# Neuer Branch, alle Commits berücksichtigen
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			# Update auf existierenden Branch
			range="$remote_oid..$local_oid"
		fi

		#Alle neuen Commits erhalten
		all_commits=$(git rev-list -n 100 "$range")
		#String(Trennzeichen ' ') in Array konvertieren
		all_commits_split=($all_commits)
		#Anzahl neuer Commits speichern
		all_commits_num=${#all_commits_split[@]}

		#Alle neuen Commits mit gültiger Message erhalten
		correct_commits=$(git rev-list -n 100 --grep '^[mM].*\|^[cCfF].*ACRNG-[0-9][0-9][0-9][0-9].*' "$range")
		#String(Trennzeichen ' ') in Array konvertieren
		correct_commits_split=($correct_commits)
		#Anzahl gültiger Commits speichern
		correct_commits_num=${#correct_commits_split[@]}

		commit=$(git rev-list -n 1 --grep '^[mM].*\|^[cCfF].*ACRNG-[0-9][0-9][0-9][0-9].*' "$range")

		if test -n "$commit"
		#Wenn es gleich viele gültige, wie neue Commits gibt
		if (($correct_commits_num==$all_commits_num))
		then
			#Push fortsetzen
			:
		else
			echo >&2 "Die Commit-Message enthält keine gültige Jira-Vorgangsnummer der Form ACRNG-0000"
			#Push mit Fehlermeldung abbrechen
			echo >&2 "Eine Commit-Message enthält keine gültige Jira-Vorgangsnummer der Form ACRNG-0000"
			exit 1
		fi
	fi
